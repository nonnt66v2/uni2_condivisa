Sicurezza computazionale
Paolo Dâ€™Arco
pdarco@unisa.it
UniversitÃ  di Salerno

Elementi di Crittografia

Paolo Dâ€™Arco (Unisa)

Sicurezza computazionale

EC-2025

1 / 24

Contenuti

1

Segretezza computazionale e pseudocasualitÃ 

2

Approccio concreto

3

Approccio asintotico

4

Motivazioni

Paolo Dâ€™Arco (Unisa)

Sicurezza computazionale

EC-2025

2 / 24

Cifratura simmetrica

La segretezza perfetta ha limitazioni intrinseche
La crittografia moderna nasce dallâ€™esigenza di superarle
Concetti chiave:
Segretezza computazionale: una chiave puÃ² essere usata per cifrare
molti messaggi lunghi, e.g., chiave di 128 bit per diversi GigaByte di
dati
PiÃ¹ debole di quella perfetta ma ... sufficiente

PseudocasualitÃ  (pseudorandomness): cattura lâ€™idea che un oggetto
puÃ² sembrare completamente casuale anche se non lo Ã¨
Centrale per lo sviluppo di tutta la crittografia moderna, con
implicazioni in altri campi

Paolo Dâ€™Arco (Unisa)

Sicurezza computazionale

EC-2025

3 / 24

Cifratura simmetrica

PiÃ¹ in dettaglio, la segretezza perfetta garantisce
assolutamente nessuna informazione per lâ€™Adv che ascolta
Adv ha potere illimitato
Da un punto di vista pratico uno schema che
rivela informazioni con probabilitÃ  2âˆ’60
ad Adv che possono investire 200 anni di sforzo computazionale
Ã¨ ancora molto buono.

Paolo Dâ€™Arco (Unisa)

Sicurezza computazionale

EC-2025

4 / 24

Cifratura simmetrica

Le definizioni di sicurezza che tengono di conto
i limiti computazionali dellâ€™Adv
ammettono una piccola probabilitÃ  di errore
vengono dette computazionali (per distinguerle da quelle basate sulla
Teoria dellâ€™Informazione)
In questo caso
la sicurezza Ã¨ soltanto garantita rispetto ad Adv efficienti
Adv possono potenzialmente avere successo ma soltanto con
probabilitÃ  molto piccola.

Paolo Dâ€™Arco (Unisa)

Sicurezza computazionale

EC-2025

5 / 24

Cifratura simmetrica

Discende che
Le risorse richieste per "rompere" uno schema devono essere maggiori
di quelle di cui Adv puÃ² disporre
Le probabilitÃ  devono essere realmente piccole
Ci sono due approcci per sviluppare una teoria significativa
Concreto
Asintotico

Paolo Dâ€™Arco (Unisa)

Sicurezza computazionale

EC-2025

6 / 24

Approccio concreto

Limita esplicitamente la probabilitÃ  di successo massima di qualsiasi Adv
probabilistico che esegue per una specificata quantitÃ  di tempo
Uno schema Ã¨ (t, )-sicuro se qualsiasi Adv che puÃ² eseguire per tempo
al piÃ¹ t ha successo nella rottura dello schema con probabilitÃ  al piÃ¹ .
Parametri reali potrebbero essere oggi: t = 280 cicli di CPU,  = 2âˆ’60 .
Esempio 3.1. I moderni schemi di cifratura simmetrici sono considerati
quasi ottimali se, quando la chiave Ã¨ lunga n bit (spazio delle chiavi 2n
elementi) qualsiasi Adv che esegue per tempo t ha successo nella rottura
dello schema con probabilitÃ  al piÃ¹ 2ctn , per qualche costante c fissata.

Paolo Dâ€™Arco (Unisa)

Sicurezza computazionale

EC-2025

7 / 24

Approccio concreto

La condizione precedente corrisponde ad un attacco di forza bruta
Essenzialmente dice che non ci sono attacchi migliori della ricerca esaustiva
Assumiamo c = 1, lunghezza della chiave 64 bit ed un PC con 16 core che
eseguono 4 Ã— 109 cicli per secondo.
La ricerca esaustiva richiede:
264
secondi, che corrispondono a circa 9 anni
4Ã—109 Ã—16

La lunghezza raccomandata oggi per la chiave Ã¨ 128 bit.

Paolo Dâ€™Arco (Unisa)

Sicurezza computazionale

EC-2025

8 / 24

Approccio concreto

Per avere unâ€™idea di quanto siano grandi questi numeri ...
2128 Ã¨ la cardinalitÃ  dello spazio delle chiavi
258 â‰ˆ il numero di secondi di vita dellâ€™Universo dal Big Bang ad oggi
E per avere unâ€™idea di quanto siano piccole le probabilitÃ  ...
Se un Adv ha successo in un anno di tempo con prob. 2âˆ’60 , Ã¨ molto piÃ¹
probabile che Alice e Bob siano colpiti entrambi da un fulmine nello stesso
periodo di tempo

Paolo Dâ€™Arco (Unisa)

Sicurezza computazionale

EC-2025

9 / 24

Svantaggi dellâ€™approccio concreto

DifficoltÃ  di interpretazione di unâ€™affermazione.
Nessun Adv che esegue per 5 anni ha successo con prob. maggiore di 

con quanto potere computazionale?
tiene conto di sviluppi futuri (legge di Moore)?
considera implementazioni generiche o ad hoc degli attacchi?
cosa possiamo dire di un Adv che esegue per 2 anni?
cosa di un Adv che esegue per 10 anni?

Paolo Dâ€™Arco (Unisa)

Sicurezza computazionale

EC-2025

10 / 24

Approccio asintotico
Introduce un parametro di sicurezza n intero
Parametrizza sia lo schema che le parti coinvolte: partecipanti, Adv
PuÃ² essere pensato al momento come la lunghezza della chiave
Ãˆ noto ad Adv
I tempi di esecuzione di Adv, dei partecipanti e la prob. di successo sono
funzioni di n.
Avversari efficienti: algoritmi probabilistici di tempo polinomiale in n
Partecipanti: algoritmi probabilistici di tempo polinomiale in n
ProbabilitÃ  di successo piccola: probabilitÃ  al crescere di n piÃ¹ piccola
dellâ€™inverso di ogni polinomio in n, i.e., 1/p(n), dette probabilitÃ 
trascurabili (negligible)

Paolo Dâ€™Arco (Unisa)

Sicurezza computazionale

EC-2025

11 / 24

Approccio asintotico

Usando lâ€™acronimo PPT per probabilistico di tempo polinomiale diremo che
Uno schema Ã¨ sicuro se qualsiasi Adv PPT ha successo nella rottura dello
schema con al piÃ¹ probabilitÃ  trascurabile
Questa nozione Ã¨ asintotica perchÃ¨ la sicurezza dipende dal comportamento
dello schema per valori del parametro n sufficientemente grandi.
Esempio 3.2 Disponiamo di uno schema asintoticamente sicuro. Un Adv
che
esegue per n3 minuti (tempo polinomiale)
1
ha successo con prob. 240 Â· 2âˆ’n (prob. trascurabile. i.e., < p(n)
)

riesce

Paolo Dâ€™Arco (Unisa)

Sicurezza computazionale

EC-2025

12 / 24

Approccio asintotico
per n â‰¤ 40, esegue per 403 minuti (6 settimane), ed ha successo con
prob. 1.
per n = 50, esegue per 503 minuti (3 mesi), ed ha successo con prob.
1
â‰ˆ 1000
.
per n = 500, esegue per 5003 minuti (200 anni), ed ha successo con
1
.
prob. 2460
Il parametro di sicurezza n Ã¨ un meccanismo che permette di calibrare la
sicurezza dello schema al livello desiderato.
Relativamente agli schemi di cifratura
guardare al parametro di sicurezza n come alla lunghezza della chiave
corrisponde essenzialmente al fatto che il tempo per una ricerca
esaustiva cresce esponenzialmente nella lunghezza della chiave

Paolo Dâ€™Arco (Unisa)

Sicurezza computazionale

EC-2025

13 / 24

Approccio asintotico

Nota: incrementando n, incrementa anche il tempo di esecuzione per le
parti oneste.
Occorre trovare un giusto equilibrio tra
tempo richiesto alle parti oneste (piÃ¹ piccolo possibile)
tempo richiesto allâ€™avversario (piÃ¹ grande possibile)
probabilitÃ  di successo (piÃ¹ piccole possibili)

Paolo Dâ€™Arco (Unisa)

Sicurezza computazionale

EC-2025

14 / 24

Approccio asintotico
Esempio 3.3 Computer piÃ¹ veloci giocano a favore delle parti oneste.
Consideriamo un protocollo crittografico in cui:
le parti oneste eseguono per 106 Â· n2 cicli di CPU
n

Adv esegue per 108 Â· n4 cicli di CPU, ed ha successo con prob. 2âˆ’ 2 .
Per computer a 2GHz, ed n = 80
le parti oneste eseguono per 106 Â· 802 cicli di CPU, 3, 2 secondi
Adv esegue per 108 Â· 804 cicli di CPU, circa 3 settimane, ed ha
successo con prob. 2âˆ’40 .
Per computer a 8GHz, ed n = 160 (incrementando la lunghezza della
chiave)
le parti oneste eseguono per 106 Â· 1602 cicli di CPU, ancora 3, 2 secondi
Adv esegue per 108 Â· 1604 cicli di CPU, piÃ¹ di 13 settimane, ed ha
successo con prob. 2âˆ’80 .
Paolo Dâ€™Arco (Unisa)

Sicurezza computazionale

EC-2025

15 / 24

Approccio asintotico

Pertanto, computer piÃ¹ veloci â‡’ lavoro di Adv piÃ¹ difficile.
Nota: anche quando si usa lâ€™approccio asintotico, garanzie di sicurezza
concrete sono necessarie in pratica. Come gli esempi mostrano, solitamente
una valutazione asintotica puÃ² essere convertita in limitazioni di sicurezza
concrete, per ogni valore di n.

Paolo Dâ€™Arco (Unisa)

Sicurezza computazionale

EC-2025

16 / 24

Approccio asintotico in dettaglio
Algoritmi efficienti.
A esegue in tempo polinomiale se esiste un polinomio p(Â·) tale che, per
ogni x âˆˆ {0, 1}âˆ— , A(x) termina in al piÃ¹ p(|x|) passi, dove |x| indica la
lunghezza dellâ€™input.
Come anticipato, progetteremo schemi in funzione del parametro di
sicurezza n
forniremo, pertanto, il parametro n scritto in unario, i.e., 1n (una
stringa di n valori 1) come input agli algoritmi esplicitamente alcune
volte
Le parti possono avere altri input ovviamente
il tempo di esecuzione degli algoritmi corrispondenti deve essere
polinomiale nella lunghezza totale dei loro input
Assumiamo per default tutti gli algoritmi come probabilistici: hanno
accesso ad un nastro di random bit di lunghezza sufficiente. DÃ  piÃ¹ potere
agli avversari.
Paolo Dâ€™Arco (Unisa)

Sicurezza computazionale

EC-2025

17 / 24

Approccio asintotico in dettaglio
ProbabilitÃ  di successo trascurabili.
Definizione 3.4. Una funzione f : N â†’ R + Ã¨ trascurabile (negligible) se,
per ogni polinomio positivo p, esiste un n0 tale che, per tutti gli n > n0 ,
1
risulta f (n) < p(n)
.
â‰ˆ
Per ogni costante c, esiste un n0 tale che, per tutti gli n > n0 , risulta
f (n) < n1c .
Denoteremo una generica funzione trascurabile con negl.
Esempio 3.5. Le funzioni
2âˆ’n

âˆš

2âˆ’ n

ed

nâˆ’ log n

sono tutte funzioni trascurabili.

Paolo Dâ€™Arco (Unisa)

Sicurezza computazionale

EC-2025

18 / 24

Approccio asintotico in dettaglio
Tuttavia, esse tendono a zero in modi diversi.
Consideriamo, per esempio, il minimo valore di n per cui ogni funzione Ã¨
< 1/n5
2âˆ’n < nâˆ’5 se e solo se n > 5 log n, che vale da n = 23
âˆš

2âˆ’ n < nâˆ’5 se e solo se n > 25 log2 n, che vale da n â‰ˆ 3500
nâˆ’ log n < nâˆ’5 se e solo se log n > 5, che vale da n = 33
âˆš

Attenzione: sembrerebbe che 2âˆ’ n tende a zero âˆš
piÃ¹ lentamente di nâˆ’ log n ,
ma non Ã¨ cosÃ¬. Per tutti gli n > 65536 risulta 2âˆ’ n < nâˆ’ log n . Tuttavia,
âˆ’ log n Ã¨
per valori di n piÃ¹ piccoli, una
âˆš prob. di successo per Adv pari a n
preferibile ad una pari a 2âˆ’ n .
Lavorare con funzioni trascurabili Ã¨ tecnicamente vantaggioso perchÃ¨
soddisfano utili proprietÃ  di chiusura.
Paolo Dâ€™Arco (Unisa)

Sicurezza computazionale

EC-2025

19 / 24

Approccio asintotico in dettaglio

Proposizione 3.6. Siano negl1 (n) e negl2 (n) funzioni trascurabili
1

la funzione negl3 (n) = negl1 (n) + negl2 (n) Ã¨ trascurabile

2

per qualsiasi polinomio p, la funzione negl4 (n) = p(n) Â· negl1 (n)

Osservazioni:
un evento a prob. trascurabile rimane trascurabile anche se
lâ€™esperimento che potrebbe generarlo viene ripetuto p(n) volte
dâ€™altra parte, se una funzione g non Ã¨ trascurabile, allora la funzione
def (n)
non Ã¨ trascurabile, per ogni polinomio positivo.
f (n) = gp(n)

Paolo Dâ€™Arco (Unisa)

Sicurezza computazionale

EC-2025

20 / 24

Sicurezza asintotica in sintesi

Ogni definizione di sicurezza consiste di due parti:
specifica di cosa Ã¨ una rottura dello schema
quale potere ha Adv
Il framework generale per le definizioni Ã¨ il seguente
Uno schema Ã¨ sicuro se, per ogni Adv PPT A che sferra un attacco di
qualche tipo formalmente specificato, e per ogni polinomio positivo p,
esiste un intero n0 tale che, quando n > n0 , la probabilitÃ  che A abbia
successo Ã¨ minore di 1/p(n).
Nota: nulla Ã¨ garantito per valori di n â‰¤ n0 .

Paolo Dâ€™Arco (Unisa)

Sicurezza computazionale

EC-2025

21 / 24

Ragioni alla base della scelta asintotica

Arbitrarie ma conformi alle scelte in teoria della complessitÃ 
Algoritmi PPT:
usuale per rappresentare computazioni efficienti
indipendenza dal modello computazionale prescelto
Tesi di Church-Turing estesa: tutti i modelli ragionevoli sono
polinomialmente equivalenti

proprietÃ  di composizione dei polinomi
A invoca subroutines. Se A Ã¨ polinomiale e le subroutine sono
polinomiali â‡’ lâ€™intero algoritmo Ã¨ polinomiale

ProbabilitÃ  trascurabili:
proprietÃ  di chiusura evidenziate in precedenza

Paolo Dâ€™Arco (Unisa)

Sicurezza computazionale

EC-2025

22 / 24

NecessitÃ  del rilassamento
Segretezza computazionale vs segretezza perfetta
rispetto ad Adv efficienti, con piccole probabilitÃ  di successo
Entrambe sono essenziali. Per capirlo, supponiamo di avere uno schema di
cifratura in cui |K | < |M|
â€¢ Dato un cifrato c, Adv puÃ² decifrare c usando tutte le chiavi k âˆˆ K ,
ottenendo una lista L di messaggi. L 6âŠ‡ M. Pertanto, rivela
informazioni sul messaggio m a cui c corrisponde
â€¢ Similmente, se Adv possedesse coppie
(m1 , c1 ), (m2 , c2 ), . . . , (m` , c` )
potrebbe tentare di decifrare le coppie fino a trovare k ed usarla
successivamente per decifrare un nuovo c.
Paolo Dâ€™Arco (Unisa)

Sicurezza computazionale

EC-2025

23 / 24

NecessitÃ  del rilassamento
Ricerche esaustive come le precedenti permettono ad Adv di aver successo
con probabilitÃ  1 in tempo lineare in |K |
â‡“
Dobbiamo escludere tali ricerche, limitando il tempo di esecuzione di Adv
Dâ€™altro canto
â€¢ se Adv possedesse ancora le coppie
(m1 , c1 ), (m2 , c2 ), . . . , (m` , c` )
potrebbe scegliere a caso una chiave e usare le coppie per verificare la
correttezza della scelta. Adv esegue in tempo costante e ha successo
con probabilitÃ  1/|K |
â‡“
Dobbiamo ammettere piccole probabilitÃ  di successo per escludere questi
attacchi
Paolo Dâ€™Arco (Unisa)

Sicurezza computazionale

EC-2025

24 / 24

